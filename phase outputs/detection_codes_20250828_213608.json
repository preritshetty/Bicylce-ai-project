{
  "total_codes": 4,
  "detection_codes": [
    {
      "flag_value": 1,
      "detection_code": "df.loc[(df['Window Seat'].astype(str).str.strip().str.lower().isin(['true','t','yes','y','1']) & df['Aisle Seat'].astype(str).str.strip().str.lower().isin(['true','t','yes','y','1'])), 'flag_status'] |= 1",
      "explanation": "This code detects contradictory values in the Window Seat and Aisle Seat columns by checking if both columns have 'true', 't', 'yes', 'y', or '1' values in the same row.",
      "test_description": "Test by inserting conflicting values in the Window Seat and Aisle Seat columns of a row and running the detection code.",
      "safety_notes": "Ensure that the normalization of boolean values covers all possible variations to accurately detect contradictory values."
    },
    {
      "flag_value": 2,
      "detection_code": "df.loc[(pd.to_datetime(df['Departure Datetime'], errors='coerce') > pd.to_datetime(df['Arrival Datetime'], errors='coerce')) & df['Departure Datetime'].notna() & df['Arrival Datetime'].notna(), 'flag_status'] |= 2",
      "explanation": "This code detects rows where the Departure Datetime is after the Arrival Datetime, indicating a business logic violation.",
      "test_description": "Test by checking if the 'flag_status' is flagged as 2 for rows where Departure Datetime is after Arrival Datetime.",
      "safety_notes": "Ensure that the datetime columns are properly formatted and contain valid datetime values for accurate detection."
    },
    {
      "flag_value": 4,
      "detection_code": "df.loc[(df['Loyalty Points'].isna() | (df['Loyalty Points'].astype(str).str.strip() == '')), 'flag_status'] |= 4",
      "explanation": "This code flags rows where the 'Loyalty Points' column has missing or empty values, indicating passengers with missing loyalty points.",
      "test_description": "Test by checking if the 'flag_status' column is updated to 4 for rows where 'Loyalty Points' are missing or empty.",
      "safety_notes": "Ensure that 'Loyalty Points' are properly recorded for all passengers to avoid missing loyalty points issues."
    },
    {
      "flag_value": 8,
      "detection_code": "df.loc[(pd.to_numeric(df['Layovers'], errors='coerce').fillna(0).astype(int) != df['Layover Locations'].fillna('').astype(str).apply(lambda x: len([i for i in re.split(r'[;,|>]|->', str(x)) if i.strip()]))), 'flag_status'] |= 8",
      "explanation": "Checks for mismatch between Layovers and Layover Locations",
      "test_description": "Create rows where Layovers does not equal number of items in Layover Locations",
      "safety_notes": "Handles missing values, multiple delimiters (;,|,>,->)."
    }
  ],
  "generation_timestamp": "2025-08-28T21:36:08.487179",
  "llm_model": "gpt-3.5-turbo"
}