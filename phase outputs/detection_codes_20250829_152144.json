{
  "total_codes": 4,
  "detection_codes": [
    {
      "flag_value": 1,
      "detection_code": "df.loc[(df['Window Seat'].astype(str).str.strip().str.lower().isin(['true','t','yes','y','1']) & df['Aisle Seat'].astype(str).str.strip().str.lower().isin(['true','t','yes','y','1'])), 'flag_status'] |= 1",
      "explanation": "This code detects contradictory values in the same row where both Window Seat and Aisle Seat are marked as True. It flags rows where this inconsistency occurs.",
      "test_description": "To test this detection, create a sample dataset where both Window Seat and Aisle Seat are marked as True in the same row. Apply the detection code and verify that the 'flag_status' is set to 1 for those rows.",
      "safety_notes": "Ensure that the boolean normalization is correctly handling different representations of True values. Verify that the detection code is correctly flagging rows with contradictory values for Window Seat and Aisle Seat."
    },
    {
      "flag_value": 2,
      "detection_code": "df.loc[(pd.to_datetime(df['Departure Datetime'], errors='coerce') > pd.to_datetime(df['Arrival Datetime'], errors='coerce')) & df['Departure Datetime'].notna() & df['Arrival Datetime'].notna(), 'flag_status'] |= 2",
      "explanation": "This code detects rows where the departure datetime is after the arrival datetime, which is a violation of business logic.",
      "test_description": "Test by checking if the 'flag_status' column is updated to 2 for rows where Departure Datetime is after Arrival Datetime.",
      "safety_notes": "Ensure that the datetime columns are properly formatted and contain valid datetime values before running this detection code."
    },
    {
      "flag_value": 4,
      "detection_code": "df.loc[(df['Loyalty Points'].isna() | (df['Loyalty Points'].astype(str).str.strip() == '')), 'flag_status'] |= 4",
      "explanation": "This code flags rows where the Loyalty Points column has missing critical information (null or empty values).",
      "test_description": "Check if the 'flag_status' column is updated to 4 for rows with missing Loyalty Points data.",
      "safety_notes": "Ensure that missing Loyalty Points data is investigated and filled in to maintain data integrity."
    },
    {
      "flag_value": 8,
      "detection_code": "df.loc[(pd.to_numeric(df['Layovers'], errors='coerce').fillna(0).astype(int) != df['Layover Locations'].fillna('').astype(str).apply(lambda x: len([i for i in re.split(r'[;,|>]|->', str(x)) if i.strip()]))), 'flag_status'] |= 8",
      "explanation": "Checks for mismatch between Layovers and Layover Locations",
      "test_description": "Create rows where Layovers does not equal number of items in Layover Locations",
      "safety_notes": "Handles missing values, multiple delimiters (;,|,>,->)."
    }
  ],
  "generation_timestamp": "2025-08-29T15:21:44.737923",
  "llm_model": "gpt-3.5-turbo"
}