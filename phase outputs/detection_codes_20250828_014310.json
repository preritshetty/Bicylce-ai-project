{
  "total_codes": 3,
  "detection_codes": [
    {
      "flag_value": 1,
      "detection_code": "df.loc[(df['Window Seat'].astype(str).str.strip().str.lower().isin(['true','t','yes','y','1']) & df['Aisle Seat'].astype(str).str.strip().str.lower().isin(['true','t','yes','y','1'])), 'flag_status'] |= 1",
      "explanation": "This code detects contradictory values in the same row where both Window Seat and Aisle Seat are marked as True. It flags rows where this inconsistency occurs.",
      "test_description": "To test this detection, create sample data where both Window Seat and Aisle Seat are marked as True in the same row. Apply the detection code and verify that the 'flag_status' is set to 1 for those rows.",
      "safety_notes": "Ensure that the normalization of boolean values covers all possible variations of True values to avoid missing any inconsistencies. Double-check the affected columns and the boolean normalization process to prevent false positives."
    },
    {
      "flag_value": 2,
      "detection_code": "df.loc[(pd.to_datetime(df['Departure Datetime'], errors='coerce') > pd.to_datetime(df['Arrival Datetime'], errors='coerce')) & df['Departure Datetime'].notna() & df['Arrival Datetime'].notna(), 'flag_status'] |= 2",
      "explanation": "This code detects rows where the departure datetime is after the arrival datetime, which violates the business logic. It ensures that the departure datetime is before the arrival datetime.",
      "test_description": "Test by checking if the 'flag_status' is flagged as 2 for rows where the departure datetime is after the arrival datetime.",
      "safety_notes": "Ensure that the datetime columns are properly formatted and not missing to avoid false positives in the detection."
    },
    {
      "flag_value": 4,
      "detection_code": "df.loc[(pd.to_numeric(df['Layovers'], errors='coerce').fillna(0).astype(int) != df['Layover Locations'].fillna('').astype(str).apply(lambda x: len([i for i in re.split(r'[;,|>]|->', str(x)) if i.strip()]))), 'flag_status'] |= 4",
      "explanation": "Checks for mismatch between Layovers and Layover Locations",
      "test_description": "Create rows where Layovers does not equal number of items in Layover Locations",
      "safety_notes": "Handles missing values, multiple delimiters (;,|,>,->)."
    }
  ],
  "generation_timestamp": "2025-08-28T01:43:10.478137",
  "llm_model": "gpt-3.5-turbo"
}