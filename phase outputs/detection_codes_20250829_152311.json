{
  "total_codes": 2,
  "detection_codes": [
    {
      "flag_value": 1,
      "detection_code": "df.loc[(df['Size'].str.lower().str.replace('bedroom', 'bhk') != df['Size'].str.lower().str.replace('bhk', 'bedroom')), 'flag_status'] |= 1",
      "explanation": "This code detects contradictory values in the 'Size' column by checking if there are inconsistent representations of 'Bedroom' and 'Bhk'. It standardizes the values by converting all 'Bedroom' to 'Bhk' and vice versa.",
      "test_description": "Test by checking if the 'Size' column contains both 'Bedroom' and 'Bhk' representations for the same number of rooms.",
      "safety_notes": "Ensure that the replacement logic accurately captures all possible variations of 'Bedroom' and 'Bhk' to avoid missing any contradictory values."
    },
    {
      "flag_value": 2,
      "detection_code": "df.loc[(pd.to_numeric(df['Price'], errors='coerce') > 2000), 'flag_status'] |= 2",
      "explanation": "Detects numeric outliers in the 'Price' column where the value is greater than 2000, which may indicate data entry errors.",
      "test_description": "Check if the 'Price' column contains any values greater than 2000. If found, flag those rows.",
      "safety_notes": "Ensure that the threshold value (2000 in this case) is appropriate for your dataset to avoid false positives."
    }
  ],
  "generation_timestamp": "2025-08-29T15:23:11.978748",
  "llm_model": "gpt-3.5-turbo"
}