{
  "execution_summary": {
    "total_rows": 10016,
    "flagged_rows": 8727,
    "clean_rows": 1289,
    "flagged_percentage": 87.13,
    "total_detections": 18954,
    "execution_time_seconds": 0.05,
    "successful_codes": 4,
    "failed_codes": 0,
    "success_rate": 100.0,
    "timestamp": "2025-08-28T18:21:01.045950"
  },
  "individual_results": [
    {
      "flag_value": 1,
      "success": true,
      "rows_detected": 2425,
      "explanation": "This code detects rows where both Window Seat and Aisle Seat are marked as True, indicating a contradictory situation where a seat is marked as both window and aisle seat simultaneously.",
      "code": "df.loc[(df['Window Seat'].astype(str).str.strip().str.lower().isin(['true','t','yes','y','1']) & df['Aisle Seat'].astype(str).str.strip().str.lower().isin(['true','t','yes','y','1'])), 'flag_status'] |= 1",
      "error": null
    },
    {
      "flag_value": 2,
      "success": true,
      "rows_detected": 4913,
      "explanation": "This code detects conflicts between the Status and departure/arrival dates by checking if the Status is not null and if the Departure Date/Time is after the Arrival Date/Time or in the future.",
      "code": "df.loc[(df['Status'].notna()) & ((pd.to_datetime(df['Departure Date/Time'], errors='coerce') > pd.to_datetime(df['Arrival Date/Time'], errors='coerce')) | (pd.to_datetime(df['Departure Date/Time'], errors='coerce') > pd.to_datetime('now')) | (pd.to_datetime(df['Arrival Date/Time'], errors='coerce') > pd.to_datetime('now'))), 'flag_status'] |= 2",
      "error": null
    },
    {
      "flag_value": 4,
      "success": true,
      "rows_detected": 4913,
      "explanation": "This code detects rows where the departure date/time is after the arrival date/time, which violates the business logic. It converts the 'Departure Date/Time' and 'Arrival Date/Time' columns to datetime format and checks if the departure date/time is greater than the arrival date/time.",
      "code": "df.loc[(pd.to_datetime(df['Departure Date/Time'], errors='coerce') > pd.to_datetime(df['Arrival Date/Time'], errors='coerce')) & df['Departure Date/Time'].notna() & df['Arrival Date/Time'].notna(), 'flag_status'] |= 4",
      "error": null
    },
    {
      "flag_value": 8,
      "success": true,
      "rows_detected": 6703,
      "explanation": "Checks for mismatch between Layovers and Layover Locations",
      "code": "df.loc[(pd.to_numeric(df['Layovers'], errors='coerce').fillna(0).astype(int) != df['Layover Locations'].fillna('').astype(str).apply(lambda x: len([i for i in re.split(r'[;,|>]|->', str(x)) if i.strip()]))), 'flag_status'] |= 8",
      "error": null
    }
  ],
  "flag_breakdown": {
    "individual_flags": {
      "1": 2425,
      "2": 4913,
      "4": 4913,
      "8": 6703
    },
    "combined_flags": {
      "1": 382,
      "14": 2513,
      "9": 858,
      "8": 2574,
      "15": 758,
      "6": 1215,
      "7": 427
    },
    "flag_combinations": [
      {
        "flag_status": 1,
        "individual_flags": [
          1
        ],
        "flag_description": "Flags 1",
        "row_count": 382,
        "binary_representation": "1"
      },
      {
        "flag_status": 14,
        "individual_flags": [
          2,
          4,
          8
        ],
        "flag_description": "Flags 2+4+8",
        "row_count": 2513,
        "binary_representation": "1110"
      },
      {
        "flag_status": 9,
        "individual_flags": [
          1,
          8
        ],
        "flag_description": "Flags 1+8",
        "row_count": 858,
        "binary_representation": "1001"
      },
      {
        "flag_status": 8,
        "individual_flags": [
          8
        ],
        "flag_description": "Flags 8",
        "row_count": 2574,
        "binary_representation": "1000"
      },
      {
        "flag_status": 15,
        "individual_flags": [
          1,
          2,
          4,
          8
        ],
        "flag_description": "Flags 1+2+4+8",
        "row_count": 758,
        "binary_representation": "1111"
      },
      {
        "flag_status": 6,
        "individual_flags": [
          2,
          4
        ],
        "flag_description": "Flags 2+4",
        "row_count": 1215,
        "binary_representation": "110"
      },
      {
        "flag_status": 7,
        "individual_flags": [
          1,
          2,
          4
        ],
        "flag_description": "Flags 1+2+4",
        "row_count": 427,
        "binary_representation": "111"
      }
    ]
  }
}