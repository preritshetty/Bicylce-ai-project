{
  "total_codes": 4,
  "detection_codes": [
    {
      "flag_value": 1,
      "detection_code": "df.loc[(df['Window Seat'].astype(str).str.strip().str.lower().isin(['true','t','yes','y','1']) & df['Aisle Seat'].astype(str).str.strip().str.lower().isin(['true','t','yes','y','1'])), 'flag_status'] |= 1",
      "explanation": "Detects contradictory values in the same row for Window Seat and Aisle Seat (both being True).",
      "test_description": "Check rows where both Window Seat and Aisle Seat are marked as True.",
      "safety_notes": "Ensure that only one of Window Seat or Aisle Seat is marked as True per row to maintain data consistency."
    },
    {
      "flag_value": 2,
      "detection_code": "df.loc[(pd.to_datetime(df['Departure Datetime'], errors='coerce') > pd.to_datetime(df['Arrival Datetime'], errors='coerce')) & df['Departure Datetime'].notna() & df['Arrival Datetime'].notna(), 'flag_status'] |= 2",
      "explanation": "Detects rows where the departure datetime is after the arrival datetime, indicating a business logic violation.",
      "test_description": "Check if the 'flag_status' column is updated to 2 for rows where Departure Datetime is after Arrival Datetime.",
      "safety_notes": "Ensure that the datetime columns are properly formatted and contain valid datetime values for accurate detection."
    },
    {
      "flag_value": 4,
      "detection_code": "df.loc[(pd.to_numeric(df['Loyalty Points'], errors='coerce').fillna(0) < 0) & df['Loyalty Points'].notna(), 'flag_status'] |= 4",
      "explanation": "This code detects negative loyalty points values in the 'Loyalty Points' column.",
      "test_description": "Test by checking if any row has a negative value in the 'Loyalty Points' column.",
      "safety_notes": "Ensure that the Loyalty Points column contains only non-negative values as loyalty points cannot be negative."
    },
    {
      "flag_value": 8,
      "detection_code": "df.loc[(pd.to_numeric(df['Layovers'], errors='coerce').fillna(0).astype(int) != df['Layover Locations'].fillna('').astype(str).apply(lambda x: len([i for i in re.split(r'[;,|>]|->', str(x)) if i.strip()]))), 'flag_status'] |= 8",
      "explanation": "Checks for mismatch between Layovers and Layover Locations",
      "test_description": "Create rows where Layovers does not equal number of items in Layover Locations",
      "safety_notes": "Handles missing values, multiple delimiters (;,|,>,->)."
    }
  ],
  "generation_timestamp": "2025-08-29T08:49:39.836485",
  "llm_model": "gpt-3.5-turbo"
}