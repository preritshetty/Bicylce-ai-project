{
  "total_codes": 4,
  "detection_codes": [
    {
      "flag_value": 1,
      "detection_code": "df.loc[(df['Window Seat'].astype(str).str.strip().str.lower().isin(['true','t','yes','y','1']) & df['Aisle Seat'].astype(str).str.strip().str.lower().isin(['true','t','yes','y','1'])), 'flag_status'] |= 1",
      "explanation": "Detects contradictory values in the same row for Window Seat and Aisle Seat being set to True simultaneously.",
      "test_description": "Check rows where both Window Seat and Aisle Seat are marked as True. Verify that only one of them should be True.",
      "safety_notes": "Ensure that the normalization of boolean values is consistent and covers all possible true representations to avoid missing any contradictory cases."
    },
    {
      "flag_value": 2,
      "detection_code": "df.loc[(df['Status'].str.lower() == 'cancelled') & df['Arrival Date/Time'].notna(), 'flag_status'] |= 2",
      "explanation": "This code detects rows where the 'Status' is 'Cancelled' but 'Arrival Date/Time' is not empty, indicating a conflict between the status and operational data.",
      "test_description": "Test by checking if the 'Status' column has 'Cancelled' and the 'Arrival Date/Time' column is not empty for flagged rows.",
      "safety_notes": "Ensure that the 'Status' column values are correctly updated to resolve the inconsistency between the status and operational data."
    },
    {
      "flag_value": 4,
      "detection_code": "df.loc[(pd.to_datetime(df['Departure Date/Time'], errors='coerce') > pd.to_datetime(df['Arrival Date/Time'], errors='coerce')) & df['Departure Date/Time'].notna() & df['Arrival Date/Time'].notna(), 'flag_status'] |= 4",
      "explanation": "This code detects rows where the departure date/time is after the arrival date/time, which violates the business logic. It converts the 'Departure Date/Time' and 'Arrival Date/Time' columns to datetime objects and checks if the departure date/time is greater than the arrival date/time.",
      "test_description": "Test by inserting a row where the departure date/time is after the arrival date/time and running the detection code.",
      "safety_notes": "Ensure that the date/time formats in the 'Departure Date/Time' and 'Arrival Date/Time' columns are consistent and correctly represent date and time values."
    },
    {
      "flag_value": 8,
      "detection_code": "df.loc[(pd.to_numeric(df['Duration (Hours)'], errors='coerce') < 0) & pd.to_numeric(df['Duration (Hours)'], errors='coerce').notna(), 'flag_status'] |= 8",
      "explanation": "This code detects negative or impossible numeric values in the 'Duration (Hours)' column.",
      "test_description": "Test by checking if the 'Duration (Hours)' column contains any negative values or values that do not make sense in the context of the data.",
      "safety_notes": "Ensure that negative or impossible values in the 'Duration (Hours)' column are reviewed and corrected to maintain data integrity."
    }
  ],
  "generation_timestamp": "2025-08-29T15:18:32.937635",
  "llm_model": "gpt-3.5-turbo"
}