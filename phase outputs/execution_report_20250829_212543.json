{
  "execution_summary": {
    "total_rows": 10000,
    "flagged_rows": 9340,
    "clean_rows": 660,
    "flagged_percentage": 93.4,
    "total_detections": 21483,
    "execution_time_seconds": 0.15,
    "successful_codes": 4,
    "failed_codes": 0,
    "success_rate": 100.0,
    "timestamp": "2025-08-29T21:25:43.402830"
  },
  "individual_results": [
    {
      "flag_value": 1,
      "success": true,
      "rows_detected": 2421,
      "explanation": "This code detects rows where both Window Seat and Aisle Seat are marked as true, indicating a contradictory situation where a seat is both a window seat and an aisle seat at the same time.",
      "code": "df.loc[(df['Window Seat'].astype(str).str.strip().str.lower().isin(['true','t','yes','y','1']) & df['Aisle Seat'].astype(str).str.strip().str.lower().isin(['true','t','yes','y','1'])), 'flag_status'] |= 1",
      "error": null
    },
    {
      "flag_value": 2,
      "success": true,
      "rows_detected": 7459,
      "explanation": "This code detects the data quality issue where there is a conflict between the status and operational timestamps. It checks if the Status is not null and if the Departure Datetime is after the Arrival Datetime or the Departure Time is after the Arrival Time.",
      "code": "df.loc[(df['Status'].notna()) & ((pd.to_datetime(df['Departure Datetime'], errors='coerce') > pd.to_datetime(df['Arrival Datetime'], errors='coerce')) | (pd.to_datetime(df['Departure Time'], errors='coerce') > pd.to_datetime(df['Arrival Time'], errors='coerce'))), 'flag_status'] |= 2",
      "error": null
    },
    {
      "flag_value": 4,
      "success": true,
      "rows_detected": 4912,
      "explanation": "This code detects rows where the departure datetime is after the arrival datetime, which is a violation of business logic.",
      "code": "df.loc[(pd.to_datetime(df['Departure Datetime'], errors='coerce') > pd.to_datetime(df['Arrival Datetime'], errors='coerce')) & df['Departure Datetime'].notna() & df['Arrival Datetime'].notna(), 'flag_status'] |= 4",
      "error": null
    },
    {
      "flag_value": 8,
      "success": true,
      "rows_detected": 6691,
      "explanation": "Checks for mismatch between Layovers and Layover Locations",
      "code": "df.loc[(pd.to_numeric(df['Layovers'], errors='coerce').fillna(0).astype(int) != df['Layover Locations'].fillna('').astype(str).apply(lambda x: len([i for i in re.split(r'[;,|>]|->', str(x)) if i.strip()]))), 'flag_status'] |= 8",
      "error": null
    }
  ],
  "flag_breakdown": {
    "individual_flags": {
      "1": 2421,
      "2": 7459,
      "4": 4912,
      "8": 6691
    },
    "combined_flags": {
      "1": 188,
      "2": 625,
      "14": 2512,
      "11": 449,
      "8": 1288,
      "15": 758,
      "6": 1215,
      "10": 1279,
      "7": 427,
      "3": 194,
      "9": 405
    },
    "flag_combinations": [
      {
        "flag_status": 1,
        "individual_flags": [
          1
        ],
        "flag_description": "Flags 1",
        "row_count": 188,
        "binary_representation": "1"
      },
      {
        "flag_status": 2,
        "individual_flags": [
          2
        ],
        "flag_description": "Flags 2",
        "row_count": 625,
        "binary_representation": "10"
      },
      {
        "flag_status": 14,
        "individual_flags": [
          2,
          4,
          8
        ],
        "flag_description": "Flags 2+4+8",
        "row_count": 2512,
        "binary_representation": "1110"
      },
      {
        "flag_status": 11,
        "individual_flags": [
          1,
          2,
          8
        ],
        "flag_description": "Flags 1+2+8",
        "row_count": 449,
        "binary_representation": "1011"
      },
      {
        "flag_status": 8,
        "individual_flags": [
          8
        ],
        "flag_description": "Flags 8",
        "row_count": 1288,
        "binary_representation": "1000"
      },
      {
        "flag_status": 15,
        "individual_flags": [
          1,
          2,
          4,
          8
        ],
        "flag_description": "Flags 1+2+4+8",
        "row_count": 758,
        "binary_representation": "1111"
      },
      {
        "flag_status": 6,
        "individual_flags": [
          2,
          4
        ],
        "flag_description": "Flags 2+4",
        "row_count": 1215,
        "binary_representation": "110"
      },
      {
        "flag_status": 10,
        "individual_flags": [
          2,
          8
        ],
        "flag_description": "Flags 2+8",
        "row_count": 1279,
        "binary_representation": "1010"
      },
      {
        "flag_status": 7,
        "individual_flags": [
          1,
          2,
          4
        ],
        "flag_description": "Flags 1+2+4",
        "row_count": 427,
        "binary_representation": "111"
      },
      {
        "flag_status": 3,
        "individual_flags": [
          1,
          2
        ],
        "flag_description": "Flags 1+2",
        "row_count": 194,
        "binary_representation": "11"
      },
      {
        "flag_status": 9,
        "individual_flags": [
          1,
          8
        ],
        "flag_description": "Flags 1+8",
        "row_count": 405,
        "binary_representation": "1001"
      }
    ]
  }
}