{
  "total_codes": 4,
  "detection_codes": [
    {
      "flag_value": 1,
      "detection_code": "df.loc[(df['Window Seat'].astype(str).str.strip().str.lower().isin(['true','t','yes','y','1']) & df['Aisle Seat'].astype(str).str.strip().str.lower().isin(['true','t','yes','y','1'])), 'flag_status'] |= 1",
      "explanation": "Detects contradictory values in Window Seat and Aisle Seat columns by checking if both columns have True values simultaneously.",
      "test_description": "Check if there are any rows where both Window Seat and Aisle Seat are marked as True.",
      "safety_notes": "Ensure that the normalization of boolean values is consistent and covers all possible variations of True values."
    },
    {
      "flag_value": 2,
      "detection_code": "df.loc[(pd.to_datetime(df['Departure Date/Time'], errors='coerce') > pd.to_datetime(df['Arrival Date/Time'], errors='coerce')) & df['Departure Date/Time'].notna() & df['Arrival Date/Time'].notna(), 'flag_status'] |= 2",
      "explanation": "This code detects rows where the departure date/time is after the arrival date/time, indicating a business logic violation. It flags such rows with the value 2 in the 'flag_status' column.",
      "test_description": "Test by checking if the 'flag_status' column has the value 2 for rows where the departure date/time is after the arrival date/time.",
      "safety_notes": "Ensure that the 'Departure Date/Time' and 'Arrival Date/Time' columns are properly formatted as datetime objects before running this detection code."
    },
    {
      "flag_value": 4,
      "detection_code": "df.loc[(df['Loyalty Points'].isna() | (df['Loyalty Points'].astype(str).str.strip() == '')), 'flag_status'] |= 4",
      "explanation": "This code flags rows where critical information is missing in the Loyalty Points column by checking for NaN values or empty strings.",
      "test_description": "To test this detection, create a sample DataFrame with missing values or empty strings in the Loyalty Points column. Apply the detection code and verify that the 'flag_status' is set to 4 for those rows.",
      "safety_notes": "Ensure that the Loyalty Points column is properly cleaned and validated before running this detection to avoid false positives."
    },
    {
      "flag_value": 8,
      "detection_code": "df.loc[(pd.to_numeric(df['Layovers'], errors='coerce').fillna(0).astype(int) != df['Layover Locations'].fillna('').astype(str).apply(lambda x: len([i for i in re.split(r'[;,|>]|->', str(x)) if i.strip()]))), 'flag_status'] |= 8",
      "explanation": "Checks for mismatch between Layovers and Layover Locations",
      "test_description": "Create rows where Layovers does not equal number of items in Layover Locations",
      "safety_notes": "Handles missing values, multiple delimiters (;,|,>,->)."
    }
  ],
  "generation_timestamp": "2025-08-28T21:16:10.429625",
  "llm_model": "gpt-3.5-turbo"
}