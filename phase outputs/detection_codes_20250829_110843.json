{
  "total_codes": 5,
  "detection_codes": [
    {
      "flag_value": 1,
      "detection_code": "df.loc[(df['Window_Seat'].astype(str).str.strip().str.lower().isin(['true','t','yes','y','1']) & df['Aisle_Seat'].astype(str).str.strip().str.lower().isin(['true','t','yes','y','1'])), 'flag_status'] |= 1",
      "explanation": "Detects rows where both Window_Seat and Aisle_Seat are marked as true, which is logically contradictory.",
      "test_description": "Check rows where both Window_Seat and Aisle_Seat are marked as true. If any are found, the detection is working.",
      "safety_notes": "Ensure that the data is reviewed for accuracy before making any corrections."
    },
    {
      "flag_value": 2,
      "detection_code": "df.loc[(pd.to_datetime(df['Departure_DateTime'], errors='coerce') > pd.to_datetime(df['Arrival_DateTime'], errors='coerce')) & df['Departure_DateTime'].notna() & df['Arrival_DateTime'].notna(), 'flag_status'] |= 2",
      "explanation": "This code detects records where the departure date and time are later than the arrival date and time, indicating a business logic violation.",
      "test_description": "Test by checking if the 'flag_status' column is updated to 2 for records where Departure_DateTime is later than Arrival_DateTime.",
      "safety_notes": "Ensure that the date and time columns are properly formatted before running this detection code."
    },
    {
      "flag_value": 4,
      "detection_code": "df.loc[(pd.to_numeric(df['Number_of_Layovers'], errors='coerce').fillna(0).astype(int) != df['Layover_Locations'].fillna('').astype(str).apply(lambda x: len([i for i in re.split(r'[;,|>]|->', str(x)) if i.strip()]))), 'flag_status'] |= 4",
      "explanation": "Checks for mismatch between Number_of_Layovers and Layover_Locations",
      "test_description": "Create rows where Number_of_Layovers does not equal number of items in Layover_Locations",
      "safety_notes": "Handles missing values, multiple delimiters (;,|,>,->)."
    },
    {
      "flag_value": 8,
      "detection_code": "df.loc[(df['Passenger_Name'].str.contains('[0-9]') | df['Seat_Number'].str.contains('[a-zA-Z]')), 'flag_status'] |= 8",
      "explanation": "This code detects rows where the 'Passenger_Name' contains a number or the 'Seat_Number' contains a letter, indicating inconsistent naming and formatting.",
      "test_description": "To test this detection, check if the 'flag_status' column is updated to 8 for rows where the 'Passenger_Name' contains a number or the 'Seat_Number' contains a letter.",
      "safety_notes": "Ensure that the regular expressions used in 'str.contains' are appropriate for detecting numeric characters in names and alphabetic characters in seat numbers."
    },
    {
      "flag_value": 16,
      "detection_code": "df.loc[(df['Airline_ID'].notna() & (df['Airline_ID'].astype(str).str.strip() != '')) | (df['Flight_Number'].notna() & (df['Flight_Number'].astype(str).str.strip() != '')) | (df['Booking_Code'].notna() & (df['Booking_Code'].astype(str).str.strip() != '')), 'flag_status'] |= 16",
      "explanation": "This code flags rows where the 'Airline_ID', 'Flight_Number', or 'Booking_Code' columns have missing or empty values, indicating cryptic names or codes that are not self-explanatory.",
      "test_description": "Check if the 'flag_status' column is updated to 16 for rows where 'Airline_ID', 'Flight_Number', or 'Booking_Code' have missing or empty values.",
      "safety_notes": "Ensure that the columns 'Airline_ID', 'Flight_Number', and 'Booking_Code' are indeed supposed to contain descriptive information and not cryptic codes. Verify the impact of renaming these columns on downstream processes."
    }
  ],
  "generation_timestamp": "2025-08-29T11:08:43.890476",
  "llm_model": "gpt-3.5-turbo"
}