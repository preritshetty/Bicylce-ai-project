{
  "total_codes": 3,
  "detection_codes": [
    {
      "flag_value": 1,
      "detection_code": "df.loc[(df['Window Seat'].astype(str).str.strip().str.lower().isin(['true','t','yes','y','1']) & df['Aisle Seat'].astype(str).str.strip().str.lower().isin(['true','t','yes','y','1'])), 'flag_status'] |= 1",
      "explanation": "Detects contradictory values in the same row for Window Seat and Aisle Seat where both are marked as True. This code checks if both Window Seat and Aisle Seat are True in the same row.",
      "test_description": "Test by creating a sample DataFrame with contradictory values in the 'Window Seat' and 'Aisle Seat' columns in the same row. Apply the detection code and verify that the 'flag_status' is updated for rows with this issue.",
      "safety_notes": "Ensure that the normalization of boolean values is consistent with the expected formats ('true', 't', 'yes', 'y', '1'). This code assumes that 'Window Seat' and 'Aisle Seat' columns contain boolean values represented as strings."
    },
    {
      "flag_value": 2,
      "detection_code": "df.loc[(pd.to_datetime(df['Departure Datetime'], errors='coerce') > pd.to_datetime(df['Arrival Datetime'], errors='coerce')) & df['Departure Datetime'].notna() & df['Arrival Datetime'].notna(), 'flag_status'] |= 2",
      "explanation": "This code detects rows where the departure datetime is after the arrival datetime, which is a violation of business logic.",
      "test_description": "Test by checking if the 'flag_status' column is updated to 2 for rows where Departure Datetime is after Arrival Datetime.",
      "safety_notes": "Ensure that the datetime columns are properly formatted and not missing to avoid false positives."
    },
    {
      "flag_value": 4,
      "detection_code": "df.loc[(pd.to_numeric(df['Layovers'], errors='coerce').fillna(0).astype(int) != df['Layover Locations'].fillna('').astype(str).apply(lambda x: len([i for i in re.split(r'[;,|>]|->', str(x)) if i.strip()]))), 'flag_status'] |= 4",
      "explanation": "Checks for mismatch between Layovers and Layover Locations",
      "test_description": "Create rows where Layovers does not equal number of items in Layover Locations",
      "safety_notes": "Handles missing values, multiple delimiters (;,|,>,->)."
    }
  ],
  "generation_timestamp": "2025-08-28T21:31:54.045370",
  "llm_model": "gpt-3.5-turbo"
}