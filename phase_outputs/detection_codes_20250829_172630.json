{
  "total_codes": 4,
  "detection_codes": [
    {
      "flag_value": 1,
      "detection_code": "df.loc[(df['Window Seat'].astype(str).str.strip().str.lower().isin(['true','t','yes','y','1']) & df['Aisle Seat'].astype(str).str.strip().str.lower().isin(['true','t','yes','y','1'])), 'flag_status'] |= 1",
      "explanation": "This code detects contradictory values in the Window Seat and Aisle Seat columns by checking if both columns have 'true', 't', 'yes', 'y', or '1' values in the same row.",
      "test_description": "Test by inserting conflicting values in the Window Seat and Aisle Seat columns of a row and running the detection code.",
      "safety_notes": "Ensure that the normalization of boolean values covers all possible variations to accurately detect contradictions."
    },
    {
      "flag_value": 2,
      "detection_code": "df.loc[(pd.to_datetime(df['Departure Date/Time'], errors='coerce') > pd.to_datetime(df['Arrival Date/Time'], errors='coerce')) & df['Departure Date/Time'].notna() & df['Arrival Date/Time'].notna(), 'flag_status'] |= 2",
      "explanation": "This code detects rows where the departure date/time is after the arrival date/time, indicating a business logic violation.",
      "test_description": "Test by inserting a row where Departure Date/Time is later than Arrival Date/Time and running the detection code.",
      "safety_notes": "Ensure that the date/time columns are properly formatted and contain valid date/time values for accurate detection."
    },
    {
      "flag_value": 4,
      "detection_code": "df.loc[(df['Loyalty Points'].isna() | (df['Loyalty Points'].astype(str).str.strip() == '')), 'flag_status'] |= 4",
      "explanation": "This code detects missing critical information in the Loyalty Points column by flagging rows where the Loyalty Points are either NaN or empty.",
      "test_description": "To test this detection, create a sample DataFrame with missing or empty values in the Loyalty Points column. Apply the detection code and verify that rows with missing Loyalty Points are correctly flagged.",
      "safety_notes": "Ensure that the Loyalty Points column is properly investigated and filled with the correct loyalty points data to address the missing information."
    },
    {
      "flag_value": 8,
      "detection_code": "df.loc[(pd.to_numeric(df['Layovers'], errors='coerce').fillna(0).astype(int) != df['Layover Locations'].fillna('').astype(str).apply(lambda x: len([i for i in re.split(r'[;,|>]|->', str(x)) if i.strip()]))), 'flag_status'] |= 8",
      "explanation": "Checks for mismatch between Layovers and Layover Locations",
      "test_description": "Create rows where Layovers does not equal number of items in Layover Locations",
      "safety_notes": "Handles missing values, multiple delimiters (;,|,>,->)."
    }
  ],
  "generation_timestamp": "2025-08-29T17:26:30.003219",
  "llm_model": "gpt-3.5-turbo"
}